#!groovy

given the name/id of a pipeline job can fetch all the artifacts 
from all of the jobs in a pipeline from top-level parent 
all the way down and then zip those files up.

// https://stackoverflow.com/questions/39960198/how-can-i-access-artifacts-created-by-jenkins-in-the-lastsuccessfulbuild-through

def TEST_JOB_URL = "https://ci.adoptopenjdk.net/job/build-scripts/job/openjdk18-pipeline/153/"

def getArtifacts(JOB_NAME, JOB_ID, JOB_CREDENTIALS) {
     stage('Get Artifacts') {
          def TIME_LIMIT = params.TIME_LIMIT ? params.TIME_LIMIT.toInteger() : 30
               timeout(time: TIME_LIMIT, unit: 'MINUTES') {
}
def call(args) {
    def build = args.build
    def regex = args.regex
    def files = build.getArtifacts()
    Map<String, String> artifactNameToContent = [:]
    for (int i = 0; i < files.size(); i++) {
        def f = files[i]
        if (f.name ==~ regex) {
            String artifactName = f.relativePath
            String artifactVirtualFile = build.getArtifactManager().root().child(artifactName)
            String artifactContent = getVirtualFileConent(artifactVirtualFile)
            artifactNameToContent.put(artifactName, artifactContent)

        }
    }
// step([$class: 'ArtifactArchiver', artifacts: '**/build/outputs/apk/*.apk', fingerprint: false])



// Child 
// https://stackoverflow.com/questions/57909647/how-to-copy-artifacts-from-parallel-child-jobs

pipeline {
    environment {
        childJobName = "Testing/MyChildJob"
    }
    stages {
        stage('Child Jobs') {
            parallel {
                stage('ChildJob1') {
                    steps {
                        runJob(childJobName, '@tag1 @tag2', 'job1')
                    }
                }
                stage('ChildJob2') {
                    steps {
                        runJob(childJobName, '@tag3 @tag4', 'job2')
                    }
                }
            }
        }
    }
    post {
        cleanup{
            cleanWs()
        }
    }
}

def runJob(String jobName, String tags, String rootReportDir) {

    def childJob = build job: jobName, propagate: false, wait: true, parameters: [string(name: 'TAGS', value: tags)]
    copyArtifacts filter: "report.html", projectName: jobName, selector: specific("${childJob.number}"), target: rootReportDir
    archiveArtifacts artifacts: "${rootReportDir}/report.html"

    if (childJob.result == "FAILURE") {
        bat "exit 1"
    }
}